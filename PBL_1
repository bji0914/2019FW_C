#define _CRT_SECURE_NO_WARNINGS //fopen 보안 경고로 인한 컴파일 에러 방지
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define print printf
#include<ctype.h> //isspace, isdigit 함수가 선언된 헤더 파일

void findOperator(char*);
int findDot(char*);
char* fillZeroInt(char*, char*);
char* fillZeroDec(char*, char*);
char* calPlus(char*, char*);
char* calMinus(char*, char*);
void init_stack() { top = -1; }
int push(int t);
int pop();
int get_top() { return (top < 0) ? -1 : stack[top]; }
int is_empty() { return (top < 0); }
int is_operator(int k) { return (k == '+' || k == '-' || k == '*' || k == '/'); }
int is_legal(char *s); // 후위표기법 수식이 적접한가 체크
int precedence(int op); // 연산자의 우선순위를 수치로 변환해준다.
void postfix(char *dst, char*src);// 중위표기법을 후위표기법으로 변환

int top;
int *stack;
char *result, *A, *B;
// end definition
int main(int argc, char *argv[]) {
	char *input;
	char *post_fix;
	int size;

	//FILE *fp = fopen(argv[1],"r");
	FILE *fp = fopen("test.txt", "r");
	if (fp == NULL) {
		printf("error\n");
		return 1;
	}

	fseek(fp, 0, SEEK_END); //파일 포인터를 파일의 끝으로 이동시킴
	size = ftell(fp); //파일 포인터의 현재 위치를 얻음
	printf("size=%d\n", size);

	input = malloc(size + 1); //파일 크기 + 1바이트(문자열 마지막의 NULL)만큼 동적 메모리 할당
	post_fix = malloc(size + 1);
	stack = malloc(sizeof(int) * size);
	memset(input, 0, size + 1); //파일 크기 + 1바이트만큼 메모리를 0으로 초기화
	memset(post_fix, 0, size + 1);

	rewind(fp); //파일 포인터를 파일의 처음으로 이동시킴
	fread(input, size, 1, fp); //파일 크기만큼 값을 읽음

	printf("%s\nsize: %d\n", input, size);
	postfix(post_fix, input);
	printf("\nPostfix : %s", post_fix);
	if (!is_legal(post_fix)) {
		printf("\n Exprssion is legal!");
		return -1;
	}
	int r = calc(post_fix);
	printf("\nAnswer : %d", r);
	fclose(fp);
	free(input);

	A = malloc(sizeof(char) * 50);
	B = malloc(sizeof(char) * 50);
	result = malloc(sizeof(char) * 50);
	A = "1234.567";
	B = "1.234567";
	A = fillZeroInt(B, A);
	B = fillZeroInt(A, B);
	A = fillZeroDec(B, A);
	B = fillZeroDec(A, B);

	//    result = calPlus(A, B);  // result에 덧셈 결과 저장
	result = calMinus(A, B);  // result에 뺄셈 결과 저장
//    findOperator(input);
	printf("A : %s \nB : %s \n", A, B);  // 현재 A, B값 (자리수까지 맞추어져있음)
	printf("result : %s\n", result);
	return 0;
}  // end main()

char* calPlus(char *X, char*Y) {  // 덧셈
	int i, sum, oneA, oneB, carry = 0;
	char *A = X, *B = Y;  // X,Y로 받아 A,B로 이름 바꿔서 사용
	char *returningResult, doPlus, *temp;
	int lengthA = strlen(A);
	temp = malloc(sizeof(char));
	returningResult = malloc(sizeof(char) * strlen(X));
	for (i = 0; i < lengthA - 1; i++, A++, B++) continue;  // A와 B의 포인터 위치를 맨 끝으로 이동하여 맨 뒤부터 계산하도록 함
	for (i = lengthA - 1; i >= 0; i--, A--, B--) {  // 맨 뒤부터 앞으로 한칸씩 수행
		if (*A == '.' || *B == '.') {  // 소수점을 만나게 되면 점을 찍고 다음 반복 수행
			returningResult[i] = '.';
			continue;
		}
		oneA = *A - 48;  // ASCII 값 중 0~9로 위치하도록 보정
		oneB = *B - 48;
		sum = oneA + oneB;  // 덧셈 수행
		if (carry) {  // 지난 덧셈에서 carry가 있을 경우 sum에 carry를 더함
			sum += carry;
			carry = 0;  // carry 사용 후 0으로 초기화
		}
		doPlus = (sum % 10) + 48;  // ASCII 0~9값 설정
		if (sum >= 10) carry++;  // 만약 합이 10보다 클 경우 carry++
		returningResult[i] = doPlus;  // 현재 위치에 덧셈 결과 넣음
	}
	if (carry) {  // 맨 앞까지 덧셈을 끝낸 후 carry가 있다면 결과값 맨 앞에 1을 추가
		strcat(temp, "1");
		strcat(temp, returningResult);
		returningResult = temp;
	}
	return returningResult;
}  // end calPlus
char* calMinus(char *X, char*Y) {  // 뺄셈
	int i, sum, oneA, oneB, carry = 0;
	char *A, *B;  // A와 B를 바꿀 부분  <<----- B > A 라서 뺄셈시 음수가 될 때
	A = X; B = Y;  // X,Y로 받아 A,B로 이름 바꿔서 사용
	char *returningResult, doMinus, *temp;
	int lengthA = strlen(A);
	temp = malloc(sizeof(char));
	returningResult = malloc(sizeof(char) * strlen(X));
	for (i = 0; i < lengthA - 1; i++, A++, B++) continue;  // A와 B의 포인터 위치를 맨 끝으로 이동하여 맨 뒤부터 계산하도록 함
	for (i = lengthA - 1; i >= 0; i--, A--, B--) {
		if (*A == '.' || *B == '.') {  // 소수점을 만나게 되면 점을 찍고 다음 반복 수행
			returningResult[i] = '.';
			continue;
		}
		oneA = *A - 48;  // ASCII 값 중 0~9로 위치하도록 보정
		oneB = *B - 48;
		sum = oneA - oneB;  // 뺄셈 수행
		if (carry) {  // 직전 반복 뺼셈에서 carry 발생했을 경우 -1
			sum--;
			carry = 0;  // carry 사용 후 0으로 초기화
		}
		if (sum < 0 && i == 0) {  // 맨 앞자리 뺄셈인데 음수일 경우
			sum *= -1;  // 양수화
			carry++;  // 캐리 ++
		}
		else if (sum < 0) {  // 뺄셈이 음수일 경우
			sum += 10;  // 10을 더하고 캐리 ++
			carry++;
		}
		doMinus = (sum % 10) + 48;  // ASCII 0~9값 설정
		returningResult[i] = doMinus;
	}
	if (carry) {  // 계산을 끝까지 마치고도 캐리가 있는 경우 = 계산 결과가 음수가 된 경우
		strcat(temp, "-");  // 마이너스 부호 붙임
		strcat(temp, returningResult);
		returningResult = temp;
	}
	return returningResult;
}  // end calMinus
char* fillZeroInt(char* A, char* B) {  // 덧셈, 뺄셈시 정수부 자리수가 차이나는 만큼 0으로 채움
	int integerOfA = findDot(A);  // A의 정수부 길이
	int integerOfB = findDot(B);  // B의 정수부 길이
	int differenceInt = integerOfA - integerOfB;
	char *tempA = A;  // A를 tempA에 복사
	char *tempB = B;  // B를 tempB에 복사
	char *temp = malloc((strlen(A) + differenceInt) * sizeof(char));  // 두 수의 자릿수가 차이나는 만큼 0으로 채울 공간

	differenceInt = integerOfA - integerOfB;
	if (integerOfA > integerOfB) {  // 정수부가 A가 B보다 긴 경우
		for (; differenceInt > 0; differenceInt--)  // 차이나는 만큼 0으로 채움
			strcat(temp, "0");
		//        strcat(tempInt, tempB);
		//        return tempInt;
	}
	strcat(temp, tempB);
	return temp;
}  // end plus
char* fillZeroDec(char *A, char *B) {  // 덧셈, 뺄셈시 소수부 자리수가 차이나는 만큼 0으로 채움
	int integerOfA = findDot(A);  // A의 정수부 길이
	int integerOfB = findDot(B);  // B의 정수부 길이
	int decimalOfA = strlen(A) - integerOfA;  // A의 소수부 길이
	int decimalOfB = strlen(B) - integerOfB;  // B의 소수부 길이
	int differenceDec = decimalOfA - decimalOfB;
	if (differenceDec <= 0) return B;
	char *tempA = A;  // A를 tempA에 복사
	char *tempB = B;  // B를 tempB에 복사
	char *temp = malloc((strlen(A) + differenceDec) * sizeof(char));  // 두 수의 자릿수가 차이나는 만큼 0으로 채울 공간
	char *temp2 = malloc((strlen(A) + differenceDec) * sizeof(char));  // 두 수의 자릿수가 차이나는 만큼 0으로 채울 공간

	if (differenceDec > 0)   // A의 소수부가 더 긴 경우
		for (; differenceDec > 0; differenceDec--)
			strcat(temp, "0");
	strcat(temp2, tempB);
	strcat(temp2, temp);
	return temp2;
}
int findDot(char* num) {  // 소수점까지의 length(정수부 길이)를 찾아 return함
	int lenOfNumber = strcspn(num, ".");
	return lenOfNumber;
}
void findOperator(char* input) {
	int i;
	int size = strlen(input);
	print("%d", size);
	for (i = 0; i < size; i++) {
		if (isdigit(input[i]) == 0) {  // 정수가 아닌 문자 탐지
			switch (input[i]) {
			case '+':  // 덧셈 +
				break;
			case '-':  // 뺄셈 -
				break;
			case '*':  // 곱셈 *
				break;
			default:  // 잘못 입력된 경우
				print("\n!! Unavailable input !!\n");
				exit(0);
			}  // end switch
		}  // end if
	}  // end for
}  // end findOperator
int push(int t, int max) {
	if (top >= max - 1) {
		printf("\nStack overflow.");
		return -1;
	}
	stack[++top] = t;
	return t;
}
int pop() {
	if (top < 0) {
		printf("\nStack underflow.");
		return -1;
	}
	return stack[top--];
}
int is_legal(char *s) {
	int f = 0;
	while (*s) {
		// 처음 공백 넘어가기
		while (isspace(*s)) {
			s++;
		}

		if (is_operator(*s)) {
			f--;
		}
		else {
			f++;
			while (!isspace(*s)) {
				s++;
			}
		}
		if (f < 1) break;
		s++;
	}
	return (f == 1);
}
int precedence(int op) {
	if (op == '(') return 0;
	if (op == '+' || op == '-') return 1;
	if (op == '*' || op == '/') return 2;
	else return 3;
}
void postfix(char *dst, char *src) {
	char c;
	init_stack();
	while (*src) {
		if (*src == '(') {
			push(*src);
			src++;
		}
		else if (*src == ')') {
			while (get_top() != '(') {
				*dst++ = pop();
				*dst++ = ' ';
			}
			pop();
			src++;
		}
		else if (is_operator(*src)) {
			while (!is_empty() &&
				precedence(get_top()) >= precedence(*src)) {
				*dst++ = pop();
				*dst++ = ' ';
			}
			push(*src);
			src++;
		}
		else if (*src >= '0' && *src <= '9') {
			do {
				*dst++ = *src++;
			} while (*src >= '0' && *src <= '9');
			*dst++ = ' ';
		}
		else {
			src++;
		}
	}
	while (!is_empty()) {
		*dst++ = pop();
		*dst++ = ' ';
	}
	dst--;
	*dst = 0;
}
