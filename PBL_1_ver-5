#define _CRT_SECURE_NO_WARNINGS //fopen 보안 경고로 인한 컴파일 에러 방지
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define print printf
#include<ctype.h> //isspace, isdigit 함수가 선언된 헤더 파일
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>

#define STDIN 0
#define STDOUT 1
#define STDERR 2

int top, size;
int *stack;
char *result, *A, *B;

void findOperator(char*);
int findDot(char*);
char* fillZeroInt(char*, char*);
char* fillZeroDec(char*, char*);
char* calPlus(char*, char*);
char* calMinus(char*, char*);
char* removeDot(char *str); // 곰셈할 때 .을 제거하는 함수.
char* addDot(char *str, int dot);  // 계산 후 .을 추가하는 함수.
char* calMul(char *a, char *b);
void init_stack() { top = -1; }
int push(int t);
int pop();
int get_top() { return (top < 0) ? -1 : stack[top]; }
int is_empty() { return (top < 0); }
int is_operator(int k) { return (k == '+' || k == '-' || k == '*' || k == '/'); }
int is_legal(char *s); // 후위표기법 수식이 적접한가 체크
int precedence(int op); // 연산자의 우선순위를 수치로 변환해준다.
int postfix(char *dst, char*src);// 중위표기법을 후위표기법으로 변환
void calc(char *p, int len); //후위표기법 계산

// end definition
int main(int argc, char *argv[]) {
   char *input;
   char *post_fix;
   char *filename;
   int fp, readn;
   int answer;

   // 이 프로그램이 실행되기 위해서는 파일이름을 인자로 받는다.
   // 그러므로 인자를 체크해주어야 한다.
   // 만약 인자가 부족하다면, 프로그램의 사용방법을 출력하고 종료한다.
   if (argc != 2)
   {
      printf("Usage : %s [file]\n", argv[0]);
      return 1;
   }

   // filename 이 argv[1] 을 가리킨다.
   // argv[1] 을 그대로 사용해도 되겠지만, 코드의 가독성을 위해서
   // 다른 변수이름을 사용하도록 했다.
   filename = argv[1];
   fp = open(filename, O_RDONLY); // 파일을 읽기전용 모드로 연다.
   if (fp < 0)
   {
      perror("file open err :");
      return 0;
   }

   /*
   // 윈도우용 파일 입출력
   FILE *fp = fopen("test.txt", "r");
   if (fp == NULL) {
      printf("error\n");
      return 1;
   }

   fseek(fp, 0, SEEK_END); //파일 포인터를 파일의 끝으로 이동시킴
   size = ftell(fp); //파일 포인터의 현재 위치를 얻음
   */

   size = lseek(fp, 0, SEEK_END);

   input = malloc(size + 1); //파일 크기 + 1바이트(문자열 마지막의 NULL)만큼 동적 메모리 할당
   post_fix = malloc(size + 1);
   stack = malloc(sizeof(int) * size);
   memset(input, 0, size + 1); //파일 크기 + 1바이트만큼 메모리를 0으로 초기화
   memset(post_fix, 0, size + 1);

   lseek(fp, 0, 0);

   /* 윈도우용 파일 입출력
   rewind(fp); // 파일 포인터를 파일의 처음으로 이동시킴
   fread(input, size, 1, fp); //파일 크기만큼 값을 읽음
   */

   // read 함수를 이용해서, 파일지시자로 부터 데이터를 읽어들인다.
   // read 함수는 읽어들인 데이터의 크기를 리턴한다.
   // 더이상 읽을 데이터가 없다면 0을 리턴하니, 그때 while 루프를 빠져나오면 된다.
   while ((readn = read(fp, input, size)) > 0)
   {
      // 읽어들인 데이터의 크기 만큼을 화면에 출력한다.
      write(STDOUT, input, readn);
   }

   //printf("%s\nsize: %d\n", input, size);
   int count = postfix(post_fix, input);
   printf("\nPostfix : %s\n", post_fix);

   // if (!is_legal(post_fix)) {
   //    print("\n!! Unavailable input !!\n");
   //    return 1;
   // }

   calc(post_fix, count);
   //answer = calc(post_fix);
   //printf("\nAnswer : %d\n", answer);

   close(fp);
   // fclose(fp); //윈도우용
   free(input);
   free(post_fix);
   free(stack);
   /*
   A = malloc(sizeof(char) * 50);
   B = malloc(sizeof(char) * 50);
   result = malloc(sizeof(char) * 50);
   A = "1234.567";
   B = "1.234567";
   A = fillZeroInt(B, A);
   B = fillZeroInt(A, B);
   A = fillZeroDec(B, A);
   B = fillZeroDec(A, B);
   */
   // result = calPlus(A, B);  // result에 덧셈 결과 저장
   //result = calMinus(A, B);  // result에 뺄셈 결과 저장
//    findOperator(input);
   //printf("A : %s \nB : %s \n", A, B);  // 현재 A, B값 (자리수까지 맞추어져있음)
   //printf("result : %s\n", result);

   return 0;
}  // end main()

char* calPlus(char *X, char*Y) {  // 덧셈
    int i, sum, oneA, oneB, carry = 0;
    char *A = X, *B = Y;  // X,Y로 받아 A,B로 이름 바꿔서 사용
    char *returningResult, doPlus, *temp;
    int lengthA = strlen(A);
    temp = malloc(sizeof(char));
    returningResult = malloc(sizeof(char) * strlen(X));
    
    if (X[0] == '-')
    {
        if (Y[0] == '-') // -1 + -3
        {
            X = X+1; //pointer이동해서 X값에서 음수 부호 빼주기
            Y = Y+1;
            char *result = calPlus(X, Y);
            char *finalResult = malloc(strlen(result) + 1);
            finalResult[1] = *result;
            finalResult[0] = '-';
            free(result);
            return finalResult;
        }
        else // -1 + 3
        {
            X = X+1;
            return calMinus(Y, X); //X에서 -만 빼기
        }

    }
    else if (Y[0] == '-') // 1 + (-3)
    {
            Y = Y+1;
            char *result = calMinus(Y, X);
            char *finalResult = malloc(strlen(result) + 1);
            finalResult[1] = *result;
            finalResult[0] = '-';
            free(result);
            return finalResult;
    }

    else

      for (i = 0; i < lengthA - 1; i++, A++, B++) continue;  // A와 B의 포인터 위치를 맨 끝으로 이동하여 맨 뒤부터 계산하도록 함
   for (i = lengthA - 1; i >= 0; i--, A--, B--) {  // 맨 뒤부터 앞으로 한칸씩 수행
      if (*A == '.' || *B == '.') {  // 소수점을 만나게 되면 점을 찍고 다음 반복 수행
         returningResult[i] = '.';
         continue;
      }
      oneA = *A - 48;  // ASCII 값 중 0~9로 위치하도록 보정
      oneB = *B - 48;
      sum = oneA + oneB;  // 덧셈 수행
      if (carry) {  // 지난 덧셈에서 carry가 있을 경우 sum에 carry를 더함
         sum += carry;
         carry = 0;  // carry 사용 후 0으로 초기화
      }
      doPlus = (sum % 10) + 48;  // ASCII 0~9값 설정
      if (sum >= 10) carry++;  // 만약 합이 10보다 클 경우 carry++
      returningResult[i] = doPlus;  // 현재 위치에 덧셈 결과 넣음
   }
   if (carry) {  // 맨 앞까지 덧셈을 끝낸 후 carry가 있다면 결과값 맨 앞에 1을 추가
      strcat(temp, "1");
      strcat(temp, returningResult);
      returningResult = temp;
   }
   return returningResult;
}  // end calPlus
char* calMinus(char *X, char*Y) {  // 뺄셈
   int i, sum, oneA, oneB, carry = 0;
   char *A, *B;  // A와 B를 바꿀 부분  <<----- B > A 라서 뺄셈시 음수가 될 때
   A = X; B = Y;  // X,Y로 받아 A,B로 이름 바꿔서 사용
   char *returningResult, doMinus, *temp;
   int lengthA = strlen(A);
   temp = malloc(sizeof(char));
   returningResult = malloc(sizeof(char) * strlen(X));
   for (i = 0; i < lengthA - 1; i++, A++, B++) continue;  // A와 B의 포인터 위치를 맨 끝으로 이동하여 맨 뒤부터 계산하도록 함
   for (i = lengthA - 1; i >= 0; i--, A--, B--) {
      if (*A == '.' || *B == '.') {  // 소수점을 만나게 되면 점을 찍고 다음 반복 수행
         returningResult[i] = '.';
         continue;
      }
      oneA = *A - 48;  // ASCII 값 중 0~9로 위치하도록 보정
      oneB = *B - 48;
      sum = oneA - oneB;  // 뺄셈 수행
      if (carry) {  // 직전 반복 뺼셈에서 carry 발생했을 경우 -1
         sum--;
         carry = 0;  // carry 사용 후 0으로 초기화
      }
      if (sum < 0 && i == 0) {  // 맨 앞자리 뺄셈인데 음수일 경우
         sum *= -1;  // 양수화
         carry++;  // 캐리 ++
      }
      else if (sum < 0) {  // 뺄셈이 음수일 경우
         sum += 10;  // 10을 더하고 캐리 ++
         carry++;
      }
      doMinus = (sum % 10) + 48;  // ASCII 0~9값 설정
      returningResult[i] = doMinus;
   }
   if (carry) {  // 계산을 끝까지 마치고도 캐리가 있는 경우 = 계산 결과가 음수가 된 경우
      strcat(temp, "-");  // 마이너스 부호 붙임
      strcat(temp, returningResult);
      returningResult = temp;
   }
   return returningResult;
}  // end calMinus
char* fillZeroInt(char* A, char* B) {  // 덧셈, 뺄셈시 정수부 자리수가 차이나는 만큼 0으로 채움
   int integerOfA = findDot(A);  // A의 정수부 길이
   int integerOfB = findDot(B);  // B의 정수부 길이
   int differenceInt = integerOfA - integerOfB;
   char *tempA = A;  // A를 tempA에 복사
   char *tempB = B;  // B를 tempB에 복사
   char *temp = malloc((strlen(A) + differenceInt) * sizeof(char));  // 두 수의 자릿수가 차이나는 만큼 0으로 채울 공간

   differenceInt = integerOfA - integerOfB;
   if (integerOfA > integerOfB) {  // 정수부가 A가 B보다 긴 경우
      for (; differenceInt > 0; differenceInt--)  // 차이나는 만큼 0으로 채움
         strcat(temp, "0");
      //        strcat(tempInt, tempB);
      //        return tempInt;
   }
   strcat(temp, tempB);
   return temp;
}  // end plus
char* fillZeroDec(char *A, char *B) {  // 덧셈, 뺄셈시 소수부 자리수가 차이나는 만큼 0으로 채움
   int integerOfA = findDot(A);  // A의 정수부 길이
   int integerOfB = findDot(B);  // B의 정수부 길이
   int decimalOfA = strlen(A) - integerOfA;  // A의 소수부 길이
   int decimalOfB = strlen(B) - integerOfB;  // B의 소수부 길이
   int differenceDec = decimalOfA - decimalOfB;
   if (differenceDec <= 0) return B;
   char *tempA = A;  // A를 tempA에 복사
   char *tempB = B;  // B를 tempB에 복사
   char *temp = malloc((strlen(A) + differenceDec) * sizeof(char));  // 두 수의 자릿수가 차이나는 만큼 0으로 채울 공간
   char *temp2 = malloc((strlen(A) + differenceDec) * sizeof(char));  // 두 수의 자릿수가 차이나는 만큼 0으로 채울 공간

   if (differenceDec > 0)   // A의 소수부가 더 긴 경우
      for (; differenceDec > 0; differenceDec--)
         strcat(temp, "0");
   strcat(temp2, tempB);
   strcat(temp2, temp);
   return temp2;
}
int findDot(char* num) {  // 소수점까지의 length(정수부 길이)를 찾아 return함
   int lenOfNumber = strcspn(num, ".");
   return lenOfNumber;
}
void findOperator(char* input) {
   int i;
   int size = strlen(input);
   print("%d", size);
   for (i = 0; i < size; i++) {
      if (isdigit(input[i]) == 0) {  // 정수가 아닌 문자 탐지
         switch (input[i]) {
         case '+':  // 덧셈 +
            break;
         case '-':  // 뺄셈 -
            break;
         case '*':  // 곱셈 *
            break;
         case ' ':
         case '.':
            break;
         default:  // 잘못 입력된 경우
            print("\n!! Unavailable input !!\n");
            exit(0);
         }  // end switch
      }  // end if
   }  // end for
}  // end findOperator
int push(int t) {
   if (top >= size - 1) {
      printf("\nStack overflow.");
      return -1;
   }
   stack[++top] = t;
   return t;
}
int pop() {
   if (top < 0) {
      printf("\nStack underflow.");
      return -1;
   }
   return stack[top--];
}
int is_legal(char *s) {
   int f = 0;
   while (*s) {
      // 처음 공백 넘어가기
      while (isspace(*s)) {
         s++;
      }

      if (is_operator(*s)) {
         f--;
      }
      else {
         if (!isdigit(*s) || !(*s) == '.') {
            return 0;
         }
         f++;
         while (!isspace(*s)) {
            s++;
         }
      }
      if (f < 1) break;
      s++;
   }
   return (f == 1);
}
int precedence(int op) {
   if (op == '(') return 0;
   if (op == '+' || op == '-') return 1;
   if (op == '*' || op == '/') return 2;
   else return 3;
}
int postfix(char *dst, char *src) {
   // operator 다음에 '-' 면 다음 숫자가 operator
   int count =0, max =0, op;
   init_stack();
   if(*src++ == '-') *dst++ = '-';    // 맨 처음 input이 '-'면 음수로 처리
   while (*src) {
      if (*src == '(') {
         push(*src);
         src++;
      }
      else if (*src == ')') {
         while (get_top() != '(') {
            *dst++ = pop();
            *dst++ = ' ';
         }
         pop();
         src++;
      }
      else if (is_operator(*src)) {
         op = *src;
         while(isblank(*src)) src++;
         if(*src++ == '-') *dst++ = '-';
         else{
            while (!is_empty() &&
               precedence(get_top()) >= precedence(op)) {
                  *dst++ = pop();
                  *dst++ = ' ';
            }
         push(op);
         }
      }
      else if (*src >= '0' && *src <= '9' || *src == '.') {
         do {
            *dst++ = *src++;
            count++;
         } while (*src >= '0' && *src <= '9' || *src == '.');
         if(count > max) max = count;
         count =0;
         *dst++ = ' ';
      }
      else {
         src++;
      }
   }
   while (!is_empty()) {
      *dst++ = pop();
      *dst++ = ' ';
   }
   dst--;
   *dst = 0;
   return max;
}
char* removeDot(char *str) // 곰셈할 때 .을 제거하는 함수.
{
   int cnt = 0;
   char *ptr;
   char *a = malloc(sizeof(char) * 30);
   char *b = malloc(sizeof(char) * 30);
   char *c = malloc(sizeof(char) * 30);
   strcpy(a, str);
   ptr = strtok(a, ".");
   while (ptr != NULL) {
      if (cnt == 0) b = ptr;
      else c = ptr;
      ptr = strtok(NULL, ".");
      cnt++;
   }
   strcat(b, c);
   return b;
}
char* addDot(char *str, int dot)  // 계산 후 .을 추가하는 함수.
{
   int i;
   char *answer = malloc(sizeof(char) * 20);
   char *temp = malloc(sizeof(char) * 20);
   memset(answer, 'X', sizeof(char) * 20);
   memset(temp, 'X', sizeof(char) * 20);
   strcpy(answer, str);
   int len = strlen(answer);
   temp[len] = '\0';
   for (i = 0; i < len + 1; ++i, answer++)
   {
      if (i + dot + 1 == len) temp[i] = '.';
      else temp[i] = *answer;
   }
   return temp;
}
char* calMul(char *a, char *b)
{
   int i, j, sum, k, strlenA, strlenB, dot = 0, cnt = 0;
   char one;
   char *ptr;
   char *result = malloc(sizeof(char)*strlen(a)*strlen(b));
   char *answer = malloc(sizeof(char)*strlen(a)*strlen(b));
   char *temp = malloc(sizeof(char)*strlen(a)*strlen(b));
   char *temp2 = malloc(sizeof(char)*strlen(a)*strlen(b));
   char *temp3 = malloc(sizeof(char)*strlen(a)*strlen(b));
   char *c = malloc(sizeof(char)*strlen(a)*strlen(b));
   char *d = malloc(sizeof(char)*strlen(a)*strlen(b));
   memset(answer, 'X', sizeof(char)*strlen(a)*strlen(b));
   memset(temp, 'X', sizeof(char)*strlen(a)*strlen(b));
   memset(temp2, 'X', sizeof(char)*strlen(a)*strlen(b));
   memset(temp3, 'X', sizeof(char)*strlen(a)*strlen(b));


   result = strchr(a, '.');

   if (result != NULL)// a에 .이 있는지 검사 있으면 제거를 한다 
   {
      c = removeDot(a);
      strlenA = strlen(a) - 1;
      dot = strlen(a) - findDot(a) - 1 + dot;
   }
   else
   {
      c = a;
      strlenA = strlen(a);

   }
   cnt = 0;


   result = strchr(b, '.');

   if (result != NULL)// b에 .이 있는지 검사 있으면 제거를 한다 
   {
      d = removeDot(b);
      strlenB = strlen(b) - 1;
      dot = strlen(b) - findDot(b) - 1 + dot;
   }
   else
   {
      d = b;
      strlenB = strlen(b);

   }
   cnt = 0;

   for (i = 0; i < strlenA - 1; i++, c++) continue;// 각 수의 포인터를 가장 끝으로 옮긴다.
   for (j = 0; j < strlenB - 1; j++, d++) continue;
   sum = 0;
   for (i = strlenB; i > 0; i--, d--)// 곱하기를 한다.
   {
      answer[strlenA + cnt + 1] = '\0';
      for (j = strlenA + cnt; j > strlenA; j--)
      {
         answer[j] = '0';
      }
      for (j = strlenA; j > 0; j--, c--)
      {
         int oneA = *c - 48;
         int oneB = *d - 48;
         sum = oneA * oneB + sum;
         if (sum > 9)
         {
            one = (sum % 10) + 48;
            sum = sum / 10;
         }
         else
         {
            one = sum + 48;
            sum = 0;
         }
         answer[j] = one;
      }
      if (sum > 0)
      {
         answer[j] = sum + 48;
      }

      if (answer[0] == 'X') {
         strncpy(temp, answer + 1, strlenA + cnt + 1);
         answer = temp;
      }

      if (cnt == 0) // 가장 처음에 계산된 값을 빈 공간에 담는다.
      {
         strcpy(temp2, answer);
      }

      else
      {

         if (strlen(answer) == strlen(temp2))  // 합계에 계산된 값을 계속 넣는다.
         {
            strcpy(temp2, calPlus(answer, temp2));

         }
         else if (strlen(answer) > strlen(temp2))
         {
            strcpy(temp2, (fillZeroInt(answer, temp2)));
            strcpy(temp2, calPlus(answer, temp2));
         }
         else if (strlen(answer) < strlen(temp2))
         {
            strcpy(answer, (fillZeroInt(temp2, answer)));
            strcpy(temp2, calPlus(answer, temp2));
         }
      }
      cnt++;
      sum = 0;
      memset(answer, 'X', sizeof(char)*strlen(a)*strlen(b));
      for (k = 0; k < strlenA; k++, c++) continue;
   }
   if (dot == 0) return temp2;
   else return addDot(temp2, dot); // .이 있었던 경우 계산후에 다시 추가한다.
}
void calc(char *p, int len) {
   //int i; out과 비슷함
   //init_stack();
   A = malloc(len + 1);
   B = malloc(len + 1);
   result = malloc(len + 1);
   memset(A, 0, len+1);
   memset(B, 0, len+1);
   memset(result, 0, len+1);
   printf("p = %s\n",p);
   printf("A = %c\n",*A);
   int i=0;
   while (*p) {
   
      if (*p >= '0' && *p <= '9' || *p == '.') {
         do {
            //i = i * 10 + *p - '0';
            //p++;
            if(A[i] == 0){
               //printf("*p = %c\n",*p);
               A[i++] = *p++;
               //printf("A = %s\n",A);
            }
            else{
               //printf("*p = %c\n",*p);
               B[i++] = *p++;
               //printf("B = %s\n",B);
            }
         } while (*p >= '0' && *p <= '9' || *p == '.');
         //push(i); 이거 구현해야 하나??
      }
      else if (*p == '+') {
         //push(pop() + pop());
         A = fillZeroInt(B, A);
         B = fillZeroInt(A, B);
         A = fillZeroDec(B, A);
         B = fillZeroDec(A, B);
         result = calPlus(A,B);
         printf("A = %s\n",A);
         printf("B = %s\n",B);
         printf("result = %s\n",result);
         A = result;
         memset(B, 0, 50);
         p++;
      }
      // else if (*p == '*') {
      //    push(pop() * pop());
      //    p++;
      // }
      // else if (*p == '-') {
      //    i = pop();
      //    push(pop() - i);
      //    p++;
      // }
      // else if (*p == '/') {
      //    i = pop();
      //    push(pop() / i);
      //    p++;
      // }
      else {
         i = 0;
         p++;
      }
   } 
   //return pop();
   printf("result = %s\n",result);
}
